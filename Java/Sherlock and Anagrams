import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'sherlockAndAnagrams' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */

    public static int sherlockAndAnagrams(String s) {
    // Write your code here
        List<String> subStrings = new ArrayList<String>();
        getAllSubstrings(subStrings, s.length(), s);
        //printSubString(subStrings);
        Map<String, Integer> resultMap = new HashMap<String, Integer>();
        sortAndMerge(subStrings, resultMap);
        //printMap(resultMap);
        int count,total=0;
        for (Map.Entry<String, Integer> pair : resultMap.entrySet()) {
            count = pair.getValue();
            if(count > 1) {
                total += count*(count-1)/2;
            }
        }
        
        return total;

    }
    
    static void printSubString(List<String> subStrings) {
        for(String sub: subStrings) {
            System.out.println("sub ==> "+sub);
        }
    }
    
    static void printMap(Map<String, Integer> resultMap) {
        resultMap.entrySet().forEach(entry -> {
            System.out.println(entry.getKey() + " " + entry.getValue());
        });
    }
    
    static void getAllSubstrings(List<String> subStrings, int length, String s) {
        for(int i = 1; i < length; i++) {
            for(int j = 0; j < length-i+1; j++) {
                subStrings.add(s.substring(j,j+i));
            }
        }
    }
    
    static void sortAndMerge(List<String> subStrings, Map<String, Integer> resultMap) {
        String sorted;
        int num = 0;
        for(String sub: subStrings) {
            sorted = sortString(sub);
            if(resultMap.containsKey(sorted)) {
                num = resultMap.get(sorted);
                resultMap.put(sorted, num+1);
            }
            else {
                resultMap.put(sorted, 1);
            }
        }
    }
    
    public static String sortString(String inputString)
    {
        char tempArray[] = inputString.toCharArray();
          
        Arrays.sort(tempArray);
          
        return new String(tempArray);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                int result = Result.sherlockAndAnagrams(s);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
